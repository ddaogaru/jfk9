{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dd/Desktop/jfk9/components/ui/scroll-indicator.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\n\nconst ScrollIndicator = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollTop = window.scrollY;\n      const docHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const newProgress = docHeight > 0 ? Math.min(scrollTop / docHeight, 1) : 0;\n\n      setProgress(newProgress);\n      setIsVisible(scrollTop > 100);\n    };\n\n    handleScroll();\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    window.addEventListener('resize', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('resize', handleScroll);\n    };\n  }, []);\n\n  if (!isVisible) return null;\n\n  return (\n    <div\n      className=\"fixed bottom-4 right-4 w-20 h-20 rounded-full flex items-center justify-center bg-white shadow-lg overflow-hidden z-50 transition-all duration-300\"\n    >\n      <svg className=\"w-full h-full -rotate-90\" viewBox=\"0 0 100 100\">\n        {/* Background circle */}\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"40\"\n          className=\"stroke-[#0A3161]/20\"\n          strokeWidth=\"8\"\n          fill=\"none\"\n        />\n        {/* Progress circle */}\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"40\"\n          className=\"stroke-[#B31942]\"\n          strokeWidth=\"8\"\n          fill=\"none\"\n          strokeDasharray=\"251.2\"\n          strokeDashoffset={251.2 * (1 - progress)}\n          strokeLinecap=\"round\"\n        />\n      </svg>\n      <div \n        className=\"absolute inset-0 flex items-center justify-center font-semibold text-sm gradient-text\"\n      >\n        SCROLL\n      </div>\n    </div>\n  );\n};\n\nexport default ScrollIndicator;\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAIA,MAAM,kBAAkB;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC;IAC3C,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAC;IAEzC,IAAA,kNAAS,EAAC;QACR,MAAM,eAAe;YACnB,MAAM,YAAY,OAAO,OAAO;YAChC,MAAM,YAAY,SAAS,eAAe,CAAC,YAAY,GAAG,OAAO,WAAW;YAC5E,MAAM,cAAc,YAAY,IAAI,KAAK,GAAG,CAAC,YAAY,WAAW,KAAK;YAEzE,YAAY;YACZ,aAAa,YAAY;QAC3B;QAEA;QACA,OAAO,gBAAgB,CAAC,UAAU,cAAc;YAAE,SAAS;QAAK;QAChE,OAAO,gBAAgB,CAAC,UAAU;QAClC,OAAO;YACL,OAAO,mBAAmB,CAAC,UAAU;YACrC,OAAO,mBAAmB,CAAC,UAAU;QACvC;IACF,GAAG,EAAE;IAEL,IAAI,CAAC,WAAW,OAAO;IAEvB,qBACE,8OAAC;QACC,WAAU;;0BAEV,8OAAC;gBAAI,WAAU;gBAA2B,SAAQ;;kCAEhD,8OAAC;wBACC,IAAG;wBACH,IAAG;wBACH,GAAE;wBACF,WAAU;wBACV,aAAY;wBACZ,MAAK;;;;;;kCAGP,8OAAC;wBACC,IAAG;wBACH,IAAG;wBACH,GAAE;wBACF,WAAU;wBACV,aAAY;wBACZ,MAAK;wBACL,iBAAgB;wBAChB,kBAAkB,QAAQ,CAAC,IAAI,QAAQ;wBACvC,eAAc;;;;;;;;;;;;0BAGlB,8OAAC;gBACC,WAAU;0BACX;;;;;;;;;;;;AAKP;uCAEe","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dd/Desktop/jfk9/components/performance-monitor.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect } from 'react';\r\n\r\nexport default function PerformanceMonitor() {\r\n  useEffect(() => {\r\n    // Enhanced performance monitoring for static HTML\r\n    if (typeof window !== 'undefined' && 'performance' in window) {\r\n      \r\n      // Track page load performance\r\n      const trackPageLoad = () => {\r\n        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\r\n        if (navigation) {\r\n          const metrics = {\r\n            dns: navigation.domainLookupEnd - navigation.domainLookupStart,\r\n            tcp: navigation.connectEnd - navigation.connectStart,\r\n            request: navigation.responseStart - navigation.requestStart,\r\n            response: navigation.responseEnd - navigation.responseStart,\r\n            dom: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\r\n            load: navigation.loadEventEnd - navigation.loadEventStart,\r\n            total: navigation.loadEventEnd - navigation.fetchStart\r\n          };\r\n          \r\n          console.log('📊 Page Load Metrics:', metrics);\r\n          \r\n          // Send to analytics (if configured)\r\n          if (typeof window !== 'undefined' && 'gtag' in window) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            (window as any).gtag('event', 'page_load_time', {\r\n              event_category: 'Performance',\r\n              event_label: 'Static HTML',\r\n              value: Math.round(metrics.total)\r\n            });\r\n          }\r\n        }\r\n      };\r\n\r\n      // Monitor Largest Contentful Paint (LCP)\r\n      const observer = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          if (entry.entryType === 'largest-contentful-paint') {\r\n            const lcp = entry.startTime;\r\n            console.log('🎯 LCP:', lcp, 'ms');\r\n            \r\n            // Track LCP performance\r\n            if (typeof window !== 'undefined' && 'gtag' in window) {\r\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n              (window as any).gtag('event', 'lcp', {\r\n                event_category: 'Web Vitals',\r\n                event_label: 'Largest Contentful Paint',\r\n                value: Math.round(lcp)\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n      \r\n      observer.observe({ entryTypes: ['largest-contentful-paint'] });\r\n\r\n      // Monitor First Input Delay (FID)\r\n      const fidObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          if (entry.entryType === 'first-input') {\r\n            const fidEntry = entry as PerformanceEventTiming;\r\n            const fid = fidEntry.processingStart - fidEntry.startTime;\r\n            console.log('⚡ FID:', fid, 'ms');\r\n            \r\n            if (typeof window !== 'undefined' && 'gtag' in window) {\r\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n              (window as any).gtag('event', 'fid', {\r\n                event_category: 'Web Vitals',\r\n                event_label: 'First Input Delay',\r\n                value: Math.round(fid)\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n      \r\n      fidObserver.observe({ entryTypes: ['first-input'] });\r\n\r\n      // Monitor Cumulative Layout Shift (CLS)\r\n      let clsValue = 0;\r\n      const clsObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const layoutShiftEntry = entry as any;\r\n          if (!layoutShiftEntry.hadRecentInput) {\r\n            clsValue += layoutShiftEntry.value;\r\n          }\r\n        }\r\n        console.log('📐 CLS:', clsValue);\r\n        \r\n            if (typeof window !== 'undefined' && 'gtag' in window) {\r\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n              (window as any).gtag('event', 'cls', {\r\n                event_category: 'Web Vitals',\r\n                event_label: 'Cumulative Layout Shift',\r\n                value: Math.round(clsValue * 1000) // Convert to integer\r\n              });\r\n            }\r\n      });\r\n      \r\n      clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n\r\n      // Monitor resource loading\r\n      const resourceObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          if (entry.entryType === 'resource') {\r\n            const resource = entry as PerformanceResourceTiming;\r\n            if (resource.duration > 1000) { // Log slow resources\r\n              console.warn('🐌 Slow resource:', resource.name, resource.duration, 'ms');\r\n            }\r\n          }\r\n        }\r\n      });\r\n      \r\n      resourceObserver.observe({ entryTypes: ['resource'] });\r\n\r\n      // Track page load when complete\r\n      if (document.readyState === 'complete') {\r\n        trackPageLoad();\r\n      } else {\r\n        window.addEventListener('load', trackPageLoad);\r\n      }\r\n\r\n      // Track service worker registration\r\n      if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          console.log('🔧 Service Worker ready:', registration);\r\n        });\r\n      }\r\n\r\n      return () => {\r\n        observer.disconnect();\r\n        fidObserver.disconnect();\r\n        clsObserver.disconnect();\r\n        resourceObserver.disconnect();\r\n        window.removeEventListener('load', trackPageLoad);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAFA;;AAIe,SAAS;IACtB,IAAA,kNAAS,EAAC;QACR,kDAAkD;QAClD,IAAI,gBAAkB,eAAe,iBAAiB;;IAsIxD,GAAG,EAAE;IAEL,OAAO;AACT","debugId":null}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dd/Desktop/jfk9/components/service-worker-register.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect } from 'react';\r\n\r\nexport default function ServiceWorkerRegister() {\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && 'serviceWorker' in navigator) {\r\n      window.addEventListener('load', () => {\r\n        navigator.serviceWorker.register('/sw.js')\r\n          .then((registration) => {\r\n            console.log('SW registered: ', registration);\r\n          })\r\n          .catch((registrationError) => {\r\n            console.log('SW registration failed: ', registrationError);\r\n          });\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAFA;;AAIe,SAAS;IACtB,IAAA,kNAAS,EAAC;QACR,IAAI,gBAAkB,eAAe,mBAAmB;;IAW1D,GAAG,EAAE;IAEL,OAAO;AACT","debugId":null}}]
}